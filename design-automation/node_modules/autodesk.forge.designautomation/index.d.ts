/**
 * autodesk.forge.designautomation
 * Asynchronous Node.js library for the Autodesk Forge Design Automation v3 implementation.
 *
 * OpenAPI spec version: 3.0.3
 * Contact: forge.help@autodesk.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */
/**
* @module AutodeskForgeDesignAutomationClient
* @version 3.0.3
*/
/**
* Manages low level client-server communications, parameter marshalling, etc. There should not be any need for an
* application to use this class directly - the *Api and model classes provide the public API for the service. The
* contents of this file should be regarded as internal but are documented for completeness.
* @alias module:AutodeskForgeDesignAutomationClient
* @class
*/
export class AutodeskForgeDesignAutomationClient {
    constructor(resiliencyConfig: any);
    config: any;
    /**
     * The base URL against which to resolve every API call's (relative) path.
     * @type {String}
     * @default https://developer.api.autodesk.com/da/us-east
     */
    basePath: String;
    /**
     * The authentication methods to be included for all API calls.
     * @type {Array.<String>}
     */
    authentications: Array<String>;
    /**
     * The default HTTP headers to be included for all API calls.
     * @type {Array.<String>}
     * @default {}
     */
    defaultHeaders: Array<String>;
    timeout: number;
    /**
     * The default number of retries.
     * @type {Number}
     * @default
     */
    maxNumberOfRetries: Number;
    circuitBreakerConfig: {
        id: string;
        requestTimeout: number;
        volumeThreshold: any;
        failureThreshold: any;
        activeThreshold: any;
        bucketCount: any;
        bucketDuration: any;
        monitor: (eventType: any, eventData: any) => void;
        isFailure: (error: any) => any;
        fallback: undefined;
    };
    /**
     * If set to false an additional timestamp parameter is added to all API GET calls to
     * prevent browser caching
     * @type {Boolean}
     * @default true
     */
    cache: Boolean;
    /**
     * If set to true, the client will save the cookies from each server
     * response, and return them in the next request.
     * @default false
     */
    enableCookies: boolean;
    agent: any;
    requestAgent: any;
    /**
    * Auth manager
    */
    authManager: any;
    superagent: any;
    /**
     * validates resiliency configuration and replaces missing configuration with default.
     * @param config resiliency configuration
     * @default {}
     */
    _validateConfig(config: any): any;
    /**
    * Monitor Callback for Circuit Breaker.
    * @param eventType The Event Type.
    * @param eventData The Event Data. // https://www.npmjs.com/package/@bennadel/circuit-breaker#logging-and-monitoring
    */
    circuitBreakerMonitor(eventType: any, eventData: any): void;
    /**
    * Failure Callback for Circuit Breaker. The function that determines if the given failure is an error; or, if it should be classified as a success (such as a 404 response).
    * @param eventType The Event Type.
    * @param eventData The Event Data. // https://www.npmjs.com/package/@bennadel/circuit-breaker#logging-and-monitoring
    */
    circuitBreakerIsFailure(error: any): any;
    /**
    * Returns a string representation for an actual parameter.
    * @param param The actual parameter.
    * @returns {String} The string representation of <code>param</code>.
    */
    paramToString(param: any): string;
    /**
    * Builds full URL by appending the given path to the base URL and replacing path parameter place-holders with parameter values.
    * NOTE: query parameters are not handled here.
    * @param {String} path The path to append to the base URL.
    * @param {Object} pathParams The parameter values to append.
    * @returns {String} The encoded path with parameter values substituted.
    */
    buildUrl(path: string, pathParams: Object): string;
    /**
    * Checks whether the given content type represents JSON.<br>
    * JSON content type examples:<br>
    * <ul>
    * <li>application/json</li>
    * <li>application/json; charset=UTF8</li>
    * <li>APPLICATION/JSON</li>
    * </ul>
    * @param {String} contentType The MIME content type to check.
    * @returns {Boolean} <code>true</code> if <code>contentType</code> represents JSON, otherwise <code>false</code>.
    */
    isJsonMime(contentType: string): boolean;
    /**
    * Chooses a content type from the given array, with JSON preferred; i.e. return JSON if included, otherwise return the first.
    * @param {Array.<String>} contentTypes
    * @returns {String} The chosen content type, preferring JSON.
    */
    jsonPreferredMime(contentTypes: string[]): string;
    /**
    * Checks whether the given parameter value represents file-like content.
    * @param param The parameter to check.
    * @returns {Boolean} <code>true</code> if <code>param</code> represents a file.
    */
    isFileParam(param: any): boolean;
    /**
    * Normalizes parameter values:
    * <ul>
    * <li>remove nils</li>
    * <li>keep files and arrays</li>
    * <li>format to string with `paramToString` for other cases</li>
    * </ul>
    * @param {Object.<String, Object>} params The parameters as object properties.
    * @returns {Object.<String, Object>} normalized parameters.
    */
    normalizeParams(params: any): any;
    /**
    * Enumeration of collection format separator strategies.
    * @enum {String}
    * @readonly
    */
    get CollectionFormatEnum(): {
        /**
        * Comma-separated values. Value: <code>csv</code>
        * @const
        */
        CSV: string;
        /**
        * Space-separated values. Value: <code>ssv</code>
        * @const
        */
        SSV: string;
        /**
        * Tab-separated values. Value: <code>tsv</code>
        * @const
        */
        TSV: string;
        /**
        * Pipe(|)-separated values. Value: <code>pipes</code>
        * @const
        */
        PIPES: string;
        /**
        * Native array. Value: <code>multi</code>
        * @const
        */
        MULTI: string;
    };
    /**
    * Builds a string representation of an array-type actual parameter, according to the given collection format.
    * @param {Array} param An array parameter.
    * @param {module:AutodeskForgeDesignAutomationClient.CollectionFormatEnum} collectionFormat The array element separator strategy.
    * @returns {String|Array} A string representation of the supplied collection, using the specified delimiter. Returns
    * <code>param</code> as is if <code>collectionFormat</code> is <code>multi</code>.
    */
    buildCollectionParam(param: any[], collectionFormat: any): string | any[];
    /**
    * Applies authentication headers to the request.
    * @param {Object} request The request object created by a <code>superagent()</code> call.
    * @param {Array.<String>} authNames An array of authentication method names.
    */
    applyAuthToRequest(request: Object, authNames: string[]): Promise<any>;
    /**
    * Deserializes an HTTP response body into a value of the specified type.
    * @param {Object} response A SuperAgent response object.
    * @param {(String|Array.<String>|Object.<String, Object>|Function)} returnType The type to return. Pass a string for simple types
    * or the constructor function for a complex type. Pass an array containing the type name to return an array of that type. To
    * return an object, pass an object with one property whose name is the key type and whose value is the corresponding value type:
    * all properties on <code>data<code> will be converted to this type.
    * @returns A value of the specified type.
    */
    deserialize(response: Object, returnType: any): any;
    /**
    * Invokes the REST service using the supplied settings and parameters.
    * @param {String} path The base URL to invoke.
    * @param {String} httpMethod The HTTP method to use.
    * @param {Object.<String, String>} pathParams A map of path parameters and their values.
    * @param {Object.<String, Object>} queryParams A map of query parameters and their values.
    * @param {Object.<String, Object>} headerParams A map of header parameters and their values.
    * @param {Object.<String, Object>} formParams A map of form parameters and their values.
    * @param {Object} bodyParam The value to pass as the request body.
    * @param {Array.<String>} authNames An array of authentication type names.
    * @param {Array.<String>} contentTypes An array of request MIME types.
    * @param {Array.<String>} accepts An array of acceptable response MIME types.
    * @param {(String|Array|ObjectFunction)} returnType The required type to return; can be a string for simple types or the constructor for a complex type.
    * @param {module:AutodeskForgeDesignAutomationClient~callApiCallback} callback The callback function.
    * @returns {Object} The SuperAgent request object.
    */
    _apiCaller(path: string, httpMethod: string, pathParams: any, queryParams: any, headerParams: any, formParams: any, bodyParam: Object, authNames: string[], contentTypes: string[], accepts: string[], returnType: any, callback: any, request: any): Object;
    /**
    * Invokes the REST service using the supplied settings and parameters.
    * @param {String} path The base URL to invoke.
    * @param {String} httpMethod The HTTP method to use.
    * @param {Object.<String, String>} pathParams A map of path parameters and their values.
    * @param {Object.<String, Object>} queryParams A map of query parameters and their values.
    * @param {Object.<String, Object>} headerParams A map of header parameters and their values.
    * @param {Object.<String, Object>} formParams A map of form parameters and their values.
    * @param {Object} bodyParam The value to pass as the request body.
    * @param {Array.<String>} authNames An array of authentication type names.
    * @param {Array.<String>} contentTypes An array of request MIME types.
    * @param {Array.<String>} accepts An array of acceptable response MIME types.
    * @param {(String|Array|ObjectFunction)} returnType The required type to return; can be a string for simple types or the constructor for a complex type.
    // Injected Code --- Start
    * @param {Object} config Optional Configuration parameters. Configure resiliency and request.
    * @param {module:<#invokerPackage><&invokerPackage>/</invokerPackage><#apiPackage><&apiPackage>/</apiPackage><&classname>~<operationId>RequestExtender} config.requestExtender The callback function, accepting an argument: The SuperAgent request object. Customize request object before it is executed.
    * @param {Integer} config.maxNumberOfRetries This number restricts the maximum number of retry attempts in valid conditions. If `canRetry` callback returns false, this number does not cause any impact.
    // Injected Code --- End
    * @returns {Promise} A {@link https://www.promisejs.org/|Promise} object.
    */
    callApi(path: string, httpMethod: string, pathParams: any, queryParams: any, headerParams: any, formParams: any, bodyParam: Object, authNames: string[], contentTypes: string[], accepts: string[], returnType: any): Promise<any>;
}


/**
* The default API client implementation.
* @type {module:AutodeskForgeDesignAutomationClient}
*/

declare module "authManager" {
export default authManager;
let authManager: AuthManager;
class AuthManager {
    constructor(config: any);
    init(): void;
}
}
declare module "defaultConfig" {
namespace _default {
    export namespace retry {
        export const maxNumberOfRetries: number;
        export const backoffDelay: number;
        export const backoffPolicy: string;
    }
    export namespace circuitBreaker {
        export const volumeThreshold: number;
        export const failureThreshold: number;
        export const activeThreshold: number;
        export const bucketCount: number;
        export const bucketDuration: number;
    }
    export const requestTimeout: number;
}
export default _default;
}

declare module "response.check" {
namespace _default {
    export { econnreset };
    export { econnrefused };
    export { etimedout };
    export { eaddrinfo };
    export { esockettimedout };
    export { gateway };
    export { timeout };
    export { internal };
    export { crossdomain };
    export { aborted };
    export { possibleServerError };
    export { possibleClientError };
}
export default _default;
/**
 * Connection reset detection
 */
function econnreset(err: any, res: any): boolean;
/**
 * Connection refused detection
 */
function econnrefused(err: any, res: any): boolean;
/**
 * Timeout detection
 */
function etimedout(err: any, res: any): boolean;
/**
 * Can't get address info
 */
function eaddrinfo(err: any, res: any): boolean;
/**
 * Socket timeout detection
 */
function esockettimedout(err: any, res: any): boolean;
/**
 * Bad gateway error detection
 */
function gateway(err: any, res: any): boolean;
/**
 * Superagent timeout errors // 408
 */
function timeout(err: any, res: any): boolean;
/**
 * Internal server error
 */
function internal(err: any, res: any): boolean;
/**
* crossDomain error
*/
function crossdomain(err: any, response: any): any;
/**
* Superagent Connection aborted
*/
function aborted(err: any, response: any): boolean;
function possibleServerError(error: any, response: any): boolean;
function possibleClientError(error: any, response: any): boolean;
}
/**
* AutodeskForgeDesignAutomation service.
* @module api/AutodeskForgeDesignAutomationApi
* @version 3.0.3
*/
export class AutodeskForgeDesignAutomationApi {
    /**
    * Constructs a new AutodeskForgeDesignAutomationApi.
    * @alias module:api/AutodeskForgeDesignAutomationApi
    * @class
    * @param {module:AutodeskForgeDesignAutomationClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:AutodeskForgeDesignAutomationClient#instance} if unspecified.
    */
    constructor(apiClient?: any);
    apiClient: any;
    /**
     * Creates a new Activity.
     * Creates a new Activity.              Limits (varies by Engine):              1. Number of Activities that can be created.
     * @param {module:model/Activity} item
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Activity} and HTTP response
     */
    createActivityWithHttpInfo(item: any, customHeader?: any): Promise<any>;
    /**
     * Creates a new Activity.
     * Creates a new Activity.              Limits (varies by Engine):              1. Number of Activities that can be created.
     * @param {module:model/Activity} item
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Activity}
     */
    createActivity(item: any, customHeader?: any): Promise<any>;
    /**
     * Creates a new alias for this Activity.
     * Creates a new alias for this Activity.              Limit:              1. Number of aliases (LimitAliases).
     * @param {String} id Name of Activity (unqualified).
     * @param {module:model/Alias} alias { id : {anyname}, version : {version number}, receiver : [{id of other Forge app},...] }.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Alias} and HTTP response
     */
    createActivityAliasWithHttpInfo(id: string, alias: any, customHeader?: any): Promise<any>;
    /**
     * Creates a new alias for this Activity.
     * Creates a new alias for this Activity.              Limit:              1. Number of aliases (LimitAliases).
     * @param {String} id Name of Activity (unqualified).
     * @param {module:model/Alias} alias { id : {anyname}, version : {version number}, receiver : [{id of other Forge app},...] }.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Alias}
     */
    createActivityAlias(id: string, alias: any, customHeader?: any): Promise<any>;
    /**
     * Creates a new version of the Activity.
     * Creates a new version of the Activity.              Limit:              1. Number of versions (LimitVersions).
     * @param {String} id Name of Activity (unqualified).
     * @param {module:model/Activity} item
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Activity} and HTTP response
     */
    createActivityVersionWithHttpInfo(id: string, item: any, customHeader?: any): Promise<any>;
    /**
     * Creates a new version of the Activity.
     * Creates a new version of the Activity.              Limit:              1. Number of versions (LimitVersions).
     * @param {String} id Name of Activity (unqualified).
     * @param {module:model/Activity} item
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Activity}
     */
    createActivityVersion(id: string, item: any, customHeader?: any): Promise<any>;
    /**
     * Creates a new AppBundle.
     * Creates a new AppBundle.              | Limits: (varies by Engine)              | 1. Number of AppBundle that can be created.              | 2. Size of AppBundle.              | This method creates new AppBundle returned in response value.              | POST upload is required to limit upload size.              |              | After this request, you need to upload the AppBundle zip.              | To upload the AppBundle package, create a multipart/form-data request using data received in reponse uploadParameters:              | - endpointURL is the URL to make the upload package request against,              | - formData are the parameters that need to be put into the upload package request body.              |   They must be followed by an extra &#39;file&#39; parameter indicating the location of the package file.              | An example:              |              | curl https://bucketname.s3.amazonaws.com/              | -F key &#x3D; apps/myApp/myfile.zip              | -F content-type &#x3D; application/octet-stream              | -F policy &#x3D; eyJleHBpcmF0aW9uIjoiMjAxOC0wNi0yMVQxMzo...(trimmed)              | -F x-amz-signature &#x3D; 800e52d73579387757e1c1cd88762...(trimmed)              | -F x-amz-credential &#x3D; AKIAIOSFODNN7EXAMPLE/20180621/us-west-2/s3/aws4_request/              | -F x-amz-algorithm &#x3D; AWS4-HMAC-SHA256              | -F x-amz-date &#x3D; 20180621T091656Z              | -F file&#x3D;@E:\\myfile.zip              | The &#39;file&#39; field must be at the end, all fields after &#39;file&#39; will be ignored.
     * @param {module:model/AppBundle} item
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AppBundle} and HTTP response
     */
    createAppBundleWithHttpInfo(item: any, customHeader?: any): Promise<any>;
    /**
     * Creates a new AppBundle.
     * Creates a new AppBundle.              | Limits: (varies by Engine)              | 1. Number of AppBundle that can be created.              | 2. Size of AppBundle.              | This method creates new AppBundle returned in response value.              | POST upload is required to limit upload size.              |              | After this request, you need to upload the AppBundle zip.              | To upload the AppBundle package, create a multipart/form-data request using data received in reponse uploadParameters:              | - endpointURL is the URL to make the upload package request against,              | - formData are the parameters that need to be put into the upload package request body.              |   They must be followed by an extra &#39;file&#39; parameter indicating the location of the package file.              | An example:              |              | curl https://bucketname.s3.amazonaws.com/              | -F key &#x3D; apps/myApp/myfile.zip              | -F content-type &#x3D; application/octet-stream              | -F policy &#x3D; eyJleHBpcmF0aW9uIjoiMjAxOC0wNi0yMVQxMzo...(trimmed)              | -F x-amz-signature &#x3D; 800e52d73579387757e1c1cd88762...(trimmed)              | -F x-amz-credential &#x3D; AKIAIOSFODNN7EXAMPLE/20180621/us-west-2/s3/aws4_request/              | -F x-amz-algorithm &#x3D; AWS4-HMAC-SHA256              | -F x-amz-date &#x3D; 20180621T091656Z              | -F file&#x3D;@E:\\myfile.zip              | The &#39;file&#39; field must be at the end, all fields after &#39;file&#39; will be ignored.
     * @param {module:model/AppBundle} item
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AppBundle}
     */
    createAppBundle(item: any, customHeader?: any): Promise<any>;
    /**
     * Creates a new alias for this AppBundle.
     * Creates a new alias for this AppBundle. Limit: 1. Number of aliases (LimitAliases).
     * @param {String} id Name of AppBundle (unqualified).
     * @param {module:model/Alias} alias
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Alias} and HTTP response
     */
    createAppBundleAliasWithHttpInfo(id: string, alias: any, customHeader?: any): Promise<any>;
    /**
     * Creates a new alias for this AppBundle.
     * Creates a new alias for this AppBundle. Limit: 1. Number of aliases (LimitAliases).
     * @param {String} id Name of AppBundle (unqualified).
     * @param {module:model/Alias} alias
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Alias}
     */
    createAppBundleAlias(id: string, alias: any, customHeader?: any): Promise<any>;
    /**
     * Creates a new version of the AppBundle.
     * Creates a new version of the AppBundle.              | Limit:              | 1. Number of versions (LimitVersions).              | 2. Size of AppBundle.              | This method creates new AppBundle returned in response value.              | POST upload is required to limit upload size. The endpoint url and all form fields are retrieved in AppBundle.UploadParameters.              |              | After this request, you need to upload the AppBundle zip.              | Use data received in the response to create multipart/form-data request. An example:              |              | curl https://bucketname.s3.amazonaws.com/              | -F key &#x3D; apps/myApp/myfile.zip              | -F content-type &#x3D; application/octet-stream              | -F policy &#x3D; eyJleHBpcmF0aW9uIjoiMjAxOC0wNi0yMVQxMzo...(trimmed)              | -F x-amz-signature &#x3D; 800e52d73579387757e1c1cd88762...(trimmed)              | -F x-amz-credential &#x3D; AKIAIOSFODNN7EXAMPLE/20180621/us-west-2/s3/aws4_request/              | -F x-amz-algorithm &#x3D; AWS4-HMAC-SHA256              | -F x-amz-date &#x3D; 20180621T091656Z              | -F file&#x3D;@E:\\myfile.zip              The &#39;file&#39; field must be at the end, all fields after &#39;file&#39; will be ignored.
     * @param {String} id Name of app (unqualified).
     * @param {module:model/AppBundle} item
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AppBundle} and HTTP response
     */
    createAppBundleVersionWithHttpInfo(id: string, item: any, customHeader?: any): Promise<any>;
    /**
     * Creates a new version of the AppBundle.
     * Creates a new version of the AppBundle.              | Limit:              | 1. Number of versions (LimitVersions).              | 2. Size of AppBundle.              | This method creates new AppBundle returned in response value.              | POST upload is required to limit upload size. The endpoint url and all form fields are retrieved in AppBundle.UploadParameters.              |              | After this request, you need to upload the AppBundle zip.              | Use data received in the response to create multipart/form-data request. An example:              |              | curl https://bucketname.s3.amazonaws.com/              | -F key &#x3D; apps/myApp/myfile.zip              | -F content-type &#x3D; application/octet-stream              | -F policy &#x3D; eyJleHBpcmF0aW9uIjoiMjAxOC0wNi0yMVQxMzo...(trimmed)              | -F x-amz-signature &#x3D; 800e52d73579387757e1c1cd88762...(trimmed)              | -F x-amz-credential &#x3D; AKIAIOSFODNN7EXAMPLE/20180621/us-west-2/s3/aws4_request/              | -F x-amz-algorithm &#x3D; AWS4-HMAC-SHA256              | -F x-amz-date &#x3D; 20180621T091656Z              | -F file&#x3D;@E:\\myfile.zip              The &#39;file&#39; field must be at the end, all fields after &#39;file&#39; will be ignored.
     * @param {String} id Name of app (unqualified).
     * @param {module:model/AppBundle} item
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AppBundle}
     */
    createAppBundleVersion(id: string, item: any, customHeader?: any): Promise<any>;
    /**
     * Creates/updates the nickname for the current Forge app.
     * Creates/updates the nickname for the current Forge app.  The nickname is  used as a clearer alternative name when identifying AppBundles and Activities, as  compared to using the Forge app ID.  Once you have defined a nickname,  it MUST be used instead of the Forge app ID.                The new nickname cannot be in use by any other Forge app.                The Forge app cannot have any data when this endpoint is invoked.  Use the &#39;DELETE /forgeapps/me&#39;  endpoint (cautiously!!!) to remove all data from this Forge app.  &#39;DELETE /forgeapps/me&#39; is  also the only way to remove the nickname.                Note the nickname is supplied in the body, not as a query-parameter.
     * @param {String} id Must be \&quot;me\&quot; for the call to succeed.
     * @param {module:model/NicknameRecord} nicknameRecord new nickname (public key is for internal use only).
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    createNicknameWithHttpInfo(id: string, nicknameRecord: any, customHeader?: any): Promise<any>;
    /**
     * Creates/updates the nickname for the current Forge app.
     * Creates/updates the nickname for the current Forge app.  The nickname is  used as a clearer alternative name when identifying AppBundles and Activities, as  compared to using the Forge app ID.  Once you have defined a nickname,  it MUST be used instead of the Forge app ID.                The new nickname cannot be in use by any other Forge app.                The Forge app cannot have any data when this endpoint is invoked.  Use the &#39;DELETE /forgeapps/me&#39;  endpoint (cautiously!!!) to remove all data from this Forge app.  &#39;DELETE /forgeapps/me&#39; is  also the only way to remove the nickname.                Note the nickname is supplied in the body, not as a query-parameter.
     * @param {String} id Must be \&quot;me\&quot; for the call to succeed.
     * @param {module:model/NicknameRecord} nicknameRecord new nickname (public key is for internal use only).
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    createNickname(id: string, nicknameRecord: any, customHeader?: any): Promise<any>;
    /**
     * Creates a new WorkItem and queues it for processing.
     * Creates a new WorkItem and queues it for processing.  The new WorkItem is always placed on the queue; no further action is necessary.                Limits (Engine-specific):                1. Number of downloads (LimitDownloads)  2. Number of uploads (LimitUploads)  3. Total download size (LimitDownloadSize)  4. Total upload size (LimitUploadSize)  5. Processing time (LimitProcessingTime)  6. Total size of uncompressed bits for all referenced appbundles (LimitTotalUncompressedAppsSizePerActivity).
     * @param {module:model/WorkItem} workItem
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/WorkItemStatus} and HTTP response
     */
    createWorkItemWithHttpInfo(workItem: any, customHeader?: any): Promise<any>;
    /**
     * Creates a new WorkItem and queues it for processing.
     * Creates a new WorkItem and queues it for processing.  The new WorkItem is always placed on the queue; no further action is necessary.                Limits (Engine-specific):                1. Number of downloads (LimitDownloads)  2. Number of uploads (LimitUploads)  3. Total download size (LimitDownloadSize)  4. Total upload size (LimitUploadSize)  5. Processing time (LimitProcessingTime)  6. Total size of uncompressed bits for all referenced appbundles (LimitTotalUncompressedAppsSizePerActivity).
     * @param {module:model/WorkItem} workItem
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/WorkItemStatus}
     */
    createWorkItem(workItem: any, customHeader?: any): Promise<any>;
    /**
     * Creates new WorkItems and queues them for processing.
     * Creates one or more  WorkItems and queues them for processing.  The new WorkItems are always placed on the queue; no further action is necessary.                Limits (Engine-specific):                1. Number of downloads (LimitDownloads)  2. Number of uploads (LimitUploads)  3. Total download size (LimitDownloadSize)  4. Total upload size (LimitUploadSize)  5. Processing time (LimitProcessingTime)  6. Total size of uncompressed bits for all referenced appbundles (LimitTotalUncompressedAppsSizePerActivity).
     * @param {Array.<module:model/WorkItem>} workItems
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/WorkItemStatus>} and HTTP response
     */
    createWorkItemsBatchWithHttpInfo(workItems: any, customHeader?: any): Promise<any>;
    /**
     * Creates new WorkItems and queues them for processing.
     * Creates one or more  WorkItems and queues them for processing.  The new WorkItems are always placed on the queue; no further action is necessary.                Limits (Engine-specific):                1. Number of downloads (LimitDownloads)  2. Number of uploads (LimitUploads)  3. Total download size (LimitDownloadSize)  4. Total upload size (LimitUploadSize)  5. Processing time (LimitProcessingTime)  6. Total size of uncompressed bits for all referenced appbundles (LimitTotalUncompressedAppsSizePerActivity).
     * @param {Array.<module:model/WorkItem>} workItems
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/WorkItemStatus>}
     */
    createWorkItemsBatch(workItems: any, customHeader?: any): Promise<any>;
    /**
     * Deletes the specified Activity.
     * Deletes the specified Activity, including all versions and aliases.
     * @param {String} id Name of Activity (unqualified).
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteActivityWithHttpInfo(id: string, customHeader?: any): Promise<any>;
    /**
     * Deletes the specified Activity.
     * Deletes the specified Activity, including all versions and aliases.
     * @param {String} id Name of Activity (unqualified).
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteActivity(id: string, customHeader?: any): Promise<any>;
    /**
     * Deletes the alias.
     * Deletes the alias.
     * @param {String} id Name of Activity (unqualified).
     * @param {String} aliasId Name of alias to delete.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteActivityAliasWithHttpInfo(id: string, aliasId: string, customHeader?: any): Promise<any>;
    /**
     * Deletes the alias.
     * Deletes the alias.
     * @param {String} id Name of Activity (unqualified).
     * @param {String} aliasId Name of alias to delete.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteActivityAlias(id: string, aliasId: string, customHeader?: any): Promise<any>;
    /**
     * Deletes the specified version of the Activity.
     * Deletes the specified version of the Activity.
     * @param {String} id Name of Activity (unqualified).
     * @param {Number} version Version to delete (integer).
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteActivityVersionWithHttpInfo(id: string, version: number, customHeader?: any): Promise<any>;
    /**
     * Deletes the specified version of the Activity.
     * Deletes the specified version of the Activity.
     * @param {String} id Name of Activity (unqualified).
     * @param {Number} version Version to delete (integer).
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteActivityVersion(id: string, version: number, customHeader?: any): Promise<any>;
    /**
     * Deletes the specified AppBundle.
     * Deletes the specified AppBundle, including all versions and aliases.
     * @param {String} id Name of AppBundle (unqualified).
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteAppBundleWithHttpInfo(id: string, customHeader?: any): Promise<any>;
    /**
     * Deletes the specified AppBundle.
     * Deletes the specified AppBundle, including all versions and aliases.
     * @param {String} id Name of AppBundle (unqualified).
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteAppBundle(id: string, customHeader?: any): Promise<any>;
    /**
     * Deletes the alias.
     * Deletes the alias.
     * @param {String} id Name of AppBundle (unqualified).
     * @param {String} aliasId Name of alias to delete.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteAppBundleAliasWithHttpInfo(id: string, aliasId: string, customHeader?: any): Promise<any>;
    /**
     * Deletes the alias.
     * Deletes the alias.
     * @param {String} id Name of AppBundle (unqualified).
     * @param {String} aliasId Name of alias to delete.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteAppBundleAlias(id: string, aliasId: string, customHeader?: any): Promise<any>;
    /**
     * Deletes the specified version of the AppBundle.
     * Deletes the specified version of the AppBundle.
     * @param {String} id Name of AppBundle (unqualified).
     * @param {Number} version Version to delete (as integer).
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteAppBundleVersionWithHttpInfo(id: string, version: number, customHeader?: any): Promise<any>;
    /**
     * Deletes the specified version of the AppBundle.
     * Deletes the specified version of the AppBundle.
     * @param {String} id Name of AppBundle (unqualified).
     * @param {Number} version Version to delete (as integer).
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteAppBundleVersion(id: string, version: number, customHeader?: any): Promise<any>;
    /**
     * Delete all data associated with this Forge app.
     * Delete all data associated with the given Forge app.                ALL Design Automation appbundles and activities are DELETED.                This may take up to 2 minutes. During this time the app will not be able to make successful requests.
     * @param {String} id Must be \&quot;me\&quot; for the call to succeed.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteForgeAppWithHttpInfo(id: string, customHeader?: any): Promise<any>;
    /**
     * Delete all data associated with this Forge app.
     * Delete all data associated with the given Forge app.                ALL Design Automation appbundles and activities are DELETED.                This may take up to 2 minutes. During this time the app will not be able to make successful requests.
     * @param {String} id Must be \&quot;me\&quot; for the call to succeed.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteForgeApp(id: string, customHeader?: any): Promise<any>;
    /**
     * Deletes user service limits.
     * @param {String} owner
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteServiceLimitsWithHttpInfo(owner: string, customHeader?: any): Promise<any>;
    /**
     * Deletes user service limits.
     * @param {String} owner
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteServiceLimits(owner: string, customHeader?: any): Promise<any>;
    /**
     * Cancels a specific WorkItem.
     * Cancels a specific WorkItem.  If the WorkItem is on the queue, it is removed from the queue and not processed.  If the WorkItem is already being processed, then it may or may not be interrupted and cancelled.  If the WorkItem has already finished processing, then it has no effect on the processing or results.
     * @param {String} id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteWorkitemWithHttpInfo(id: string, customHeader?: any): Promise<any>;
    /**
     * Cancels a specific WorkItem.
     * Cancels a specific WorkItem.  If the WorkItem is on the queue, it is removed from the queue and not processed.  If the WorkItem is already being processed, then it may or may not be interrupted and cancelled.  If the WorkItem has already finished processing, then it has no effect on the processing or results.
     * @param {String} id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteWorkitem(id: string, customHeader?: any): Promise<any>;
    /**
     * Lists all available Activities.
     * Lists all available Activities, including Activities shared with this Forge app.
     * @param {Object} opts Optional parameters
     * @param {String} opts.page Access an additional &#39;page&#39; of data when necessary, based on the &#39;paginationToken&#39; returned from a previous invocation.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PageString} and HTTP response
     */
    getActivitiesWithHttpInfo(opts: {
        page: string;
    }, customHeader?: any): Promise<any>;
    /**
     * Lists all available Activities.
     * Lists all available Activities, including Activities shared with this Forge app.
     * @param {Object} opts Optional parameters
     * @param {String} opts.page Access an additional &#39;page&#39; of data when necessary, based on the &#39;paginationToken&#39; returned from a previous invocation.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PageString}
     */
    getActivities(opts: {
        page: string;
    }, customHeader?: any): Promise<any>;
    /**
     * Gets the details of the specified Activity.
     * Gets the details of the specified Activity. Note that the {id} parameter must be a QualifiedId (owner.name+label).
     * @param {String} id Full qualified id of the Activity (owner.name+label).
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Activity} and HTTP response
     */
    getActivityWithHttpInfo(id: string, customHeader?: any): Promise<any>;
    /**
     * Gets the details of the specified Activity.
     * Gets the details of the specified Activity. Note that the {id} parameter must be a QualifiedId (owner.name+label).
     * @param {String} id Full qualified id of the Activity (owner.name+label).
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Activity}
     */
    getActivity(id: string, customHeader?: any): Promise<any>;
    /**
     * Get alias details.
     * Get alias details.
     * @param {String} id Name of Activity (unqualified).
     * @param {String} aliasId Name of alias.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Alias} and HTTP response
     */
    getActivityAliasWithHttpInfo(id: string, aliasId: string, customHeader?: any): Promise<any>;
    /**
     * Get alias details.
     * Get alias details.
     * @param {String} id Name of Activity (unqualified).
     * @param {String} aliasId Name of alias.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Alias}
     */
    getActivityAlias(id: string, aliasId: string, customHeader?: any): Promise<any>;
    /**
     * Lists all aliases for the specified Activity.
     * Lists all aliases for the specified Activity.
     * @param {String} id Name of Activity (unqualified).
     * @param {Object} opts Optional parameters
     * @param {String} opts.page Access an additional &#39;page&#39; of data when necessary, based on the &#39;paginationToken&#39; returned from a previous invocation.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PageAlias} and HTTP response
     */
    getActivityAliasesWithHttpInfo(id: string, opts: {
        page: string;
    }, customHeader?: any): Promise<any>;
    /**
     * Lists all aliases for the specified Activity.
     * Lists all aliases for the specified Activity.
     * @param {String} id Name of Activity (unqualified).
     * @param {Object} opts Optional parameters
     * @param {String} opts.page Access an additional &#39;page&#39; of data when necessary, based on the &#39;paginationToken&#39; returned from a previous invocation.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PageAlias}
     */
    getActivityAliases(id: string, opts: {
        page: string;
    }, customHeader?: any): Promise<any>;
    /**
     * Gets the details of the specified version of the Activity.
     * Gets the details of the specified version of the Activity.
     * @param {String} id Name of Activity (unqualified).
     * @param {Number} version Version to retrieve (integer).
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Activity} and HTTP response
     */
    getActivityVersionWithHttpInfo(id: string, version: number, customHeader?: any): Promise<any>;
    /**
     * Gets the details of the specified version of the Activity.
     * Gets the details of the specified version of the Activity.
     * @param {String} id Name of Activity (unqualified).
     * @param {Number} version Version to retrieve (integer).
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Activity}
     */
    getActivityVersion(id: string, version: number, customHeader?: any): Promise<any>;
    /**
     * Lists all versions of the specified Activity.
     * Lists all versions of the specified Activity.
     * @param {String} id Name of Activity (unqualified).
     * @param {Object} opts Optional parameters
     * @param {String} opts.page Access an additional &#39;page&#39; of data when necessary, based on the &#39;paginationToken&#39; returned from a previous invocation.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PageInt32} and HTTP response
     */
    getActivityVersionsWithHttpInfo(id: string, opts: {
        page: string;
    }, customHeader?: any): Promise<any>;
    /**
     * Lists all versions of the specified Activity.
     * Lists all versions of the specified Activity.
     * @param {String} id Name of Activity (unqualified).
     * @param {Object} opts Optional parameters
     * @param {String} opts.page Access an additional &#39;page&#39; of data when necessary, based on the &#39;paginationToken&#39; returned from a previous invocation.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PageInt32}
     */
    getActivityVersions(id: string, opts: {
        page: string;
    }, customHeader?: any): Promise<any>;
    /**
     * Gets the details of the specified AppBundle.
     * Gets the details of the specified AppBundle. Note that the {id} parameter must be a QualifiedId (owner.name+label).
     * @param {String} id Full qualified id of the AppBundle (owner.name+label).
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AppBundle} and HTTP response
     */
    getAppBundleWithHttpInfo(id: string, customHeader?: any): Promise<any>;
    /**
     * Gets the details of the specified AppBundle.
     * Gets the details of the specified AppBundle. Note that the {id} parameter must be a QualifiedId (owner.name+label).
     * @param {String} id Full qualified id of the AppBundle (owner.name+label).
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AppBundle}
     */
    getAppBundle(id: string, customHeader?: any): Promise<any>;
    /**
     * Get alias details.
     * Get alias details.
     * @param {String} id Name of AppBundle (unqualified).
     * @param {String} aliasId Name of alias.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Alias} and HTTP response
     */
    getAppBundleAliasWithHttpInfo(id: string, aliasId: string, customHeader?: any): Promise<any>;
    /**
     * Get alias details.
     * Get alias details.
     * @param {String} id Name of AppBundle (unqualified).
     * @param {String} aliasId Name of alias.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Alias}
     */
    getAppBundleAlias(id: string, aliasId: string, customHeader?: any): Promise<any>;
    /**
     * Lists all aliases for the specified AppBundle.
     * Lists all aliases for the specified AppBundle.
     * @param {String} id Name of activity (unqualified).
     * @param {Object} opts Optional parameters
     * @param {String} opts.page Access an additional &#39;page&#39; of data when necessary, based on the &#39;paginationToken&#39; returned from a previous invocation.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PageAlias} and HTTP response
     */
    getAppBundleAliasesWithHttpInfo(id: string, opts: {
        page: string;
    }, customHeader?: any): Promise<any>;
    /**
     * Lists all aliases for the specified AppBundle.
     * Lists all aliases for the specified AppBundle.
     * @param {String} id Name of activity (unqualified).
     * @param {Object} opts Optional parameters
     * @param {String} opts.page Access an additional &#39;page&#39; of data when necessary, based on the &#39;paginationToken&#39; returned from a previous invocation.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PageAlias}
     */
    getAppBundleAliases(id: string, opts: {
        page: string;
    }, customHeader?: any): Promise<any>;
    /**
     * Gets the details of the specified version of the AppBundle.
     * Gets the details of the specified version of the AppBundle.
     * @param {String} id Name of AppBundle (unqualified).
     * @param {Number} version Version to retrieve (as integer).
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AppBundle} and HTTP response
     */
    getAppBundleVersionWithHttpInfo(id: string, version: number, customHeader?: any): Promise<any>;
    /**
     * Gets the details of the specified version of the AppBundle.
     * Gets the details of the specified version of the AppBundle.
     * @param {String} id Name of AppBundle (unqualified).
     * @param {Number} version Version to retrieve (as integer).
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AppBundle}
     */
    getAppBundleVersion(id: string, version: number, customHeader?: any): Promise<any>;
    /**
     * Lists all versions of the specified AppBundle.
     * Lists all versions of the specified AppBundle.
     * @param {String} id Name of AppBundle (unqualified).
     * @param {Object} opts Optional parameters
     * @param {String} opts.page Access an additional &#39;page&#39; of data when necessary, based on the &#39;paginationToken&#39; returned from a previous invocation.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PageInt32} and HTTP response
     */
    getAppBundleVersionsWithHttpInfo(id: string, opts: {
        page: string;
    }, customHeader?: any): Promise<any>;
    /**
     * Lists all versions of the specified AppBundle.
     * Lists all versions of the specified AppBundle.
     * @param {String} id Name of AppBundle (unqualified).
     * @param {Object} opts Optional parameters
     * @param {String} opts.page Access an additional &#39;page&#39; of data when necessary, based on the &#39;paginationToken&#39; returned from a previous invocation.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PageInt32}
     */
    getAppBundleVersions(id: string, opts: {
        page: string;
    }, customHeader?: any): Promise<any>;
    /**
     * Lists all available AppBundles.
     * Lists all available AppBundles, including AppBundles shared with this Forge app.
     * @param {Object} opts Optional parameters
     * @param {String} opts.page Access an additional &#39;page&#39; of data when necessary, based on the &#39;paginationToken&#39; returned from a previous invocation.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PageString} and HTTP response
     */
    getAppBundlesWithHttpInfo(opts: {
        page: string;
    }, customHeader?: any): Promise<any>;
    /**
     * Lists all available AppBundles.
     * Lists all available AppBundles, including AppBundles shared with this Forge app.
     * @param {Object} opts Optional parameters
     * @param {String} opts.page Access an additional &#39;page&#39; of data when necessary, based on the &#39;paginationToken&#39; returned from a previous invocation.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PageString}
     */
    getAppBundles(opts: {
        page: string;
    }, customHeader?: any): Promise<any>;
    /**
     * Gets the details of the specified Engine.
     * Gets the details of the specified Engine. Note that the {id} parameter must be a QualifiedId (owner.name+label).
     * @param {String} id Full qualified id of the Engine (owner.name+label).
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Engine} and HTTP response
     */
    getEngineWithHttpInfo(id: string, customHeader?: any): Promise<any>;
    /**
     * Gets the details of the specified Engine.
     * Gets the details of the specified Engine. Note that the {id} parameter must be a QualifiedId (owner.name+label).
     * @param {String} id Full qualified id of the Engine (owner.name+label).
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Engine}
     */
    getEngine(id: string, customHeader?: any): Promise<any>;
    /**
     * Lists all available Engines.
     * Lists all available Engines.
     * @param {Object} opts Optional parameters
     * @param {String} opts.page Access an additional &#39;page&#39; of data when necessary, based on the &#39;paginationToken&#39; returned from a previous invocation.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PageString} and HTTP response
     */
    getEnginesWithHttpInfo(opts: {
        page: string;
    }, customHeader?: any): Promise<any>;
    /**
     * Lists all available Engines.
     * Lists all available Engines.
     * @param {Object} opts Optional parameters
     * @param {String} opts.page Access an additional &#39;page&#39; of data when necessary, based on the &#39;paginationToken&#39; returned from a previous invocation.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PageString}
     */
    getEngines(opts: {
        page: string;
    }, customHeader?: any): Promise<any>;
    /**
     * Returns the user&#39;s (app) nickname.
     * Return the given Forge app&#39;s nickname.                If the app has no nickname, this route will return its id.
     * @param {String} id Must be \&quot;me\&quot; for the call to succeed.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link 'String'} and HTTP response
     */
    getNicknameWithHttpInfo(id: string, customHeader?: any): Promise<any>;
    /**
     * Returns the user&#39;s (app) nickname.
     * Return the given Forge app&#39;s nickname.                If the app has no nickname, this route will return its id.
     * @param {String} id Must be \&quot;me\&quot; for the call to succeed.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link 'String'}
     */
    getNickname(id: string, customHeader?: any): Promise<any>;
    /**
     * Get the service limit configuration.
     * Gets a user&#39;s service limit configuration.
     * @param {String} owner The user to fetch the service limit configuration for.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ServiceLimit} and HTTP response
     */
    getServiceLimitWithHttpInfo(owner: string, customHeader?: any): Promise<any>;
    /**
     * Get the service limit configuration.
     * Gets a user&#39;s service limit configuration.
     * @param {String} owner The user to fetch the service limit configuration for.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ServiceLimit}
     */
    getServiceLimit(owner: string, customHeader?: any): Promise<any>;
    /**
     * Gets all Shares (AppBundles and Activities) shared by this Forge app.
     * Gets all Shares (AppBundles and Activities) shared by this Forge app (shared to other  Forge apps for them to use).                Sharing of AppBundles and Activities is controlled via the use of &#39;aliases&#39;.
     * @param {Object} opts Optional parameters
     * @param {String} opts.page Used to get subsequent &#39;pages&#39; of data.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PageShare} and HTTP response
     */
    getSharesWithHttpInfo(opts: {
        page: string;
    }, customHeader?: any): Promise<any>;
    /**
     * Gets all Shares (AppBundles and Activities) shared by this Forge app.
     * Gets all Shares (AppBundles and Activities) shared by this Forge app (shared to other  Forge apps for them to use).                Sharing of AppBundles and Activities is controlled via the use of &#39;aliases&#39;.
     * @param {Object} opts Optional parameters
     * @param {String} opts.page Used to get subsequent &#39;pages&#39; of data.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PageShare}
     */
    getShares(opts: {
        page: string;
    }, customHeader?: any): Promise<any>;
    /**
     * Gets the status of a specific WorkItem.
     * Gets the status of a specific WorkItem.  Typically used to &#39;poll&#39; for              the completion of a WorkItem, but see the use of the &#39;onComplete&#39; argument for              an alternative that does not require &#39;polling&#39;.  WorkItem status is retained              for a limited period of time after the WorkItem completes.              Limits:              1. Retention period (LimitWorkItemRetentionPeriod).
     * @param {String} id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/WorkItemStatus} and HTTP response
     */
    getWorkitemStatusWithHttpInfo(id: string, customHeader?: any): Promise<any>;
    /**
     * Gets the status of a specific WorkItem.
     * Gets the status of a specific WorkItem.  Typically used to &#39;poll&#39; for              the completion of a WorkItem, but see the use of the &#39;onComplete&#39; argument for              an alternative that does not require &#39;polling&#39;.  WorkItem status is retained              for a limited period of time after the WorkItem completes.              Limits:              1. Retention period (LimitWorkItemRetentionPeriod).
     * @param {String} id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/WorkItemStatus}
     */
    getWorkitemStatus(id: string, customHeader?: any): Promise<any>;
    /**
     *
     * Gets the health status by Engine or for all Engines (Inventor, AutoCAD ...).
     * @param {String} engine
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link 'String'} and HTTP response
     */
    healthStatusWithHttpInfo(engine: string, customHeader?: any): Promise<any>;
    /**
     *
     * Gets the health status by Engine or for all Engines (Inventor, AutoCAD ...).
     * @param {String} engine
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link 'String'}
     */
    healthStatus(engine: string, customHeader?: any): Promise<any>;
    /**
     * Modify alias details.
     * Modify alias details.
     * @param {String} id Name of Activity (unqualified).
     * @param {String} aliasId Name of alias.
     * @param {module:model/AliasPatch} alias Alias details to be modified.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Alias} and HTTP response
     */
    modifyActivityAliasWithHttpInfo(id: string, aliasId: string, alias: any, customHeader?: any): Promise<any>;
    /**
     * Modify alias details.
     * Modify alias details.
     * @param {String} id Name of Activity (unqualified).
     * @param {String} aliasId Name of alias.
     * @param {module:model/AliasPatch} alias Alias details to be modified.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Alias}
     */
    modifyActivityAlias(id: string, aliasId: string, alias: any, customHeader?: any): Promise<any>;
    /**
     * Modify alias details.
     * Modify alias details.
     * @param {String} id Name of AppBundle (unqualified).
     * @param {String} aliasId Name of alias.
     * @param {module:model/AliasPatch} alias Alias details to be modified.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Alias} and HTTP response
     */
    modifyAppBundleAliasWithHttpInfo(id: string, aliasId: string, alias: any, customHeader?: any): Promise<any>;
    /**
     * Modify alias details.
     * Modify alias details.
     * @param {String} id Name of AppBundle (unqualified).
     * @param {String} aliasId Name of alias.
     * @param {module:model/AliasPatch} alias Alias details to be modified.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Alias}
     */
    modifyAppBundleAlias(id: string, aliasId: string, alias: any, customHeader?: any): Promise<any>;
    /**
     * Creates a new service limits configuration or updates exiting.
     * Creates a new service limits configuration or updates exiting.
     * @param {String} owner The user to associate the configuration to.
     * @param {module:model/ServiceLimit} item
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ServiceLimit} and HTTP response
     */
    modifyServiceLimitsWithHttpInfo(owner: string, item: any, customHeader?: any): Promise<any>;
    /**
     * Creates a new service limits configuration or updates exiting.
     * Creates a new service limits configuration or updates exiting.
     * @param {String} owner The user to associate the configuration to.
     * @param {module:model/ServiceLimit} item
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ServiceLimit}
     */
    modifyServiceLimits(owner: string, item: any, customHeader?: any): Promise<any>;
}
/**
 * The Activity model module.
 * @module model/Activity
 * @version 3.0.3
 */
export  class Activity {
    /**
     * Constructs a <code>Activity</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Activity} obj Optional instance to populate.
     * @return {module:model/Activity} The populated <code>Activity</code> instance.
     */
    static constructFromObject(data: Object, obj: any): any;
    /**
     * Constructs a new <code>Activity</code>.
     * Defines an Activity, a type of work, a function: input/outputs, instructions. An Activity is an action that can be executed within an engine. For example, for AutoCAD engine this might be plotting a DWG to PDF or update the CAD standards in a drawing file.
     * @alias module:model/Activity
     * @class
     * @param commandLine {Array.<String>} Path to Engine executable with arguments.
     * @param engine {String} The actual processing engine that runs the WorkItem job and processes the Activity.
     */
    constructor(commandLine: string[], engine: string);
    commandLine: string[];
    engine: string;
    /**
     * Each parameter represents an input or output file.
     * @member {Object.<String, module:model/Parameter>} parameters
     */
    parameters: any;
    /**
     * Name of Activity, see the example section.
     * @member {String} id
     */
    id: any;
    /**
     * A module referenced by an Activity in order to perform specific functions. Typically this is a DLL or some other form of custom code.
     * @member {Array.<String>} appbundles
     */
    appbundles: any;
    /**
     * The url/string Settings for a given set of AppBundles.
     * @member {Object.<String, module:model/ISetting>} settings
     */
    settings: any;
    /**
     * Human readable description of the object.
     * @member {String} description
     */
    description: any;
    /**
     * @member {Number} version
     */
    version: any;
}
/**
 * The Alias model module.
 * @module model/Alias
 * @version 3.0.3
 */
export  class Alias {
    /**
     * Constructs a <code>Alias</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Alias} obj Optional instance to populate.
     * @return {module:model/Alias} The populated <code>Alias</code> instance.
     */
    static constructFromObject(data: Object, obj: any): any;
    /**
     * The version that this alias refers to.
     * @member {Number} version
     */
    version: any;
    /**
     * The user to share the alias with.
     * @member {String} receiver
     */
    receiver: any;
    /**
     * @member {String} id
     */
    id: any;
}
/**
 * The AliasPatch model module.
 * @module model/AliasPatch
 * @version 3.0.3
 */
export  class AliasPatch {
    /**
     * Constructs a <code>AliasPatch</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AliasPatch} obj Optional instance to populate.
     * @return {module:model/AliasPatch} The populated <code>AliasPatch</code> instance.
     */
    static constructFromObject(data: Object, obj: any): any;
    /**
     * The user to share the alias with.
     * @member {String} receiver
     */
    receiver: any;
    /**
     * The version that this alias refers to.
     * @member {Number} version
     */
    version: any;
}
/**
 * The AppBundle model module.
 * @module model/AppBundle
 * @version 3.0.3
 */
export  class AppBundle {
    /**
     * Constructs a <code>AppBundle</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AppBundle} obj Optional instance to populate.
     * @return {module:model/AppBundle} The populated <code>AppBundle</code> instance.
     */
    static constructFromObject(data: Object, obj: any): any;
    /**
     * Constructs a new <code>AppBundle</code>.
     * An AppBundle is a module that is used by an Activity in order to perform a particular action.
     * @alias module:model/AppBundle
     * @class
     * @param engine {String} The actual processing engine that runs the WorkItem job and processes the Activity.
     */
    constructor(engine: string);
    engine: string;
    /**
     * The URL that points to the zip package for the AppBundle or Engine.
     * @member {String} package
     */
    package: any;
    /**
     * The parameters needed to POST an AppBundle.
     * @member {module:model/UploadAppBundleParameters} uploadParameters
     */
    uploadParameters: any;
    /**
     * Name of AppBundle, see the example section.
     * @member {String} id
     */
    id: any;
    /**
     * A module referenced by an Activity in order to perform specific functions. Typically this is a DLL or some other form of custom code.
     * @member {Array.<String>} appbundles
     */
    appbundles: any;
    /**
     * The url/string Settings for a given set of AppBundles.
     * @member {Object.<String, module:model/ISetting>} settings
     */
    settings: any;
    /**
     * Human readable description of the object.
     * @member {String} description
     */
    description: any;
    /**
     * @member {Number} version
     */
    version: any;
}
/**
 * The BackendLimits model module.
 * @module model/BackendLimits
 * @version 3.0.3
 */
export  class BackendLimits {
    /**
     * Constructs a <code>BackendLimits</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BackendLimits} obj Optional instance to populate.
     * @return {module:model/BackendLimits} The populated <code>BackendLimits</code> instance.
     */
    static constructFromObject(data: Object, obj: any): any;
    /**
     * Max number of downloads per workitem.
     * @member {Number} limitDownloads
     */
    limitDownloads: any;
    /**
     * Max number of uploads per workitem.
     * @member {Number} limitUploads
     */
    limitUploads: any;
    /**
     * Max total size of all downloads in MB per workitem.
     * @member {Number} limitDownloadSizeMB
     */
    limitDownloadSizeMB: any;
    /**
     * Max total size of all uploads in MB per workitem.
     * @member {Number} limitUploadSizeMB
     */
    limitUploadSizeMB: any;
    /**
     * Max duration of processing in seconds per workitem (includes download and upload time).
     * @member {Number} limitProcessingTimeSec
     */
    limitProcessingTimeSec: any;
    /**
     * Max permitted size of all Apps referenced by an activity. It is enforced when you post a workitem. Default is 500.
     * @member {Number} limitTotalUncompressedAppsSizeInMB
     */
    limitTotalUncompressedAppsSizeInMB: any;
}
/**
* Enum class Engine.
* @enum {}
* @readonly
*/
export  class Engine {
    /**
     * value: "api"
     * @static
     */
    static get api(): string;
    /**
     * value: "AutoCAD"
     * @static
     */
    static get AutoCAD(): string;
    /**
     * value: "Revit"
     * @static
     */
    static get Revit(): string;
    /**
     * value: "Inventor"
     * @static
     */
    static get Inventor(): string;
    /**
     * value: "3dsMax"
     * @static
     */
    static get "3dsMax"(): string;
    /**
     * value: "Test"
     * @static
     */
    static get Test(): string;
    /**
    * Returns a <code>Engine</code> enum value from a Javascript object name.
    * @param {Object} data The plain JavaScript object containing the name of the enum value.
    * @return {module:model/Engine} The enum <code>Engine</code> value.
    */
    static constructFromObject(object: any): any;
}
/**
 * Enum class Engine.
 */
/**
 * The FrontendLimits model module.
 * @module model/FrontendLimits
 * @version 3.0.3
 */
export  class FrontendLimits {
    /**
     * Constructs a <code>FrontendLimits</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FrontendLimits} obj Optional instance to populate.
     * @return {module:model/FrontendLimits} The populated <code>FrontendLimits</code> instance.
     */
    static constructFromObject(data: Object, obj: any): any;
    /**
     * Max permitted size for App/Activity/Workitem json payload in kilobytes. Default is 16KB.
     * @member {Number} limitPayloadSizeInKB
     */
    limitPayloadSizeInKB: any;
    /**
     * Max permitted number of App/Activity versions a client can have at any one time. Default is 100.
     * @member {Number} limitVersions
     */
    limitVersions: any;
    /**
     * Max permitted number of aliases that a client can have at any one time. Default is 100.
     * @member {Number} limitAliases
     */
    limitAliases: any;
    /**
     * Max permitted number of public aliases that a client can have at any one time. Default is 0.
     * @member {Number} limitPublicAliases
     */
    limitPublicAliases: any;
    /**
     * Max permitted size of an App upload in megabytes.
     * @member {Number} limitAppUploadSizeInMB
     */
    limitAppUploadSizeInMB: any;
    /**
     * Max commulative engine usage by client in a given calendar month. This limit applies to all engines. For example, if the limit is set to 1 hour then 30 minutes of Revit usage and 30 minutes of Inventor usage will reach limit.
     * @member {Number} limitMonthlyProcessingTimeInHours
     */
    limitMonthlyProcessingTimeInHours: any;
}
/**
 * The IArgument model module.
 * @module model/IArgument
 * @version 3.0.3
 */
export  class IArgument {
    /**
     * Constructs a <code>IArgument</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IArgument} obj Optional instance to populate.
     * @return {module:model/IArgument} The populated <code>IArgument</code> instance.
     */
    static constructFromObject(data: Object, obj: any): any;
}
/**
 * The ISetting model module.
 * @module model/ISetting
 * @version 3.0.3
 */
export  class ISetting {
    /**
     * Constructs a <code>ISetting</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ISetting} obj Optional instance to populate.
     * @return {module:model/ISetting} The populated <code>ISetting</code> instance.
     */
    static constructFromObject(data: Object, obj: any): any;
}
/**
 * The NicknameRecord model module.
 * @module model/NicknameRecord
 * @version 3.0.3
 */
export  class NicknameRecord {
    /**
     * Constructs a <code>NicknameRecord</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NicknameRecord} obj Optional instance to populate.
     * @return {module:model/NicknameRecord} The populated <code>NicknameRecord</code> instance.
     */
    static constructFromObject(data: Object, obj: any): any;
    /**
     * @member {String} nickname
     */
    nickname: any;
    /**
     * @member {module:model/PublicKey} publicKey
     */
    publicKey: any;
}
/**
 * The PageAlias model module.
 * @module model/PageAlias
 * @version 3.0.3
 */
export  class PageAlias {
    /**
     * Constructs a <code>PageAlias</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PageAlias} obj Optional instance to populate.
     * @return {module:model/PageAlias} The populated <code>PageAlias</code> instance.
     */
    static constructFromObject(data: Object, obj: any): any;
    /**
     * @member {String} paginationToken
     */
    paginationToken: any;
    /**
     * @member {Array.<module:model/Alias>} data
     */
    data: any;
}
/**
 * The PageInt32 model module.
 * @module model/PageInt32
 * @version 3.0.3
 */
export  class PageInt32 {
    /**
     * Constructs a <code>PageInt32</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PageInt32} obj Optional instance to populate.
     * @return {module:model/PageInt32} The populated <code>PageInt32</code> instance.
     */
    static constructFromObject(data: Object, obj: any): any;
    /**
     * @member {String} paginationToken
     */
    paginationToken: any;
    /**
     * @member {Array.<Number>} data
     */
    data: any;
}
/**
 * The PageShare model module.
 * @module model/PageShare
 * @version 3.0.3
 */
export  class PageShare {
    /**
     * Constructs a <code>PageShare</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PageShare} obj Optional instance to populate.
     * @return {module:model/PageShare} The populated <code>PageShare</code> instance.
     */
    static constructFromObject(data: Object, obj: any): any;
    /**
     * @member {String} paginationToken
     */
    paginationToken: any;
    /**
     * @member {Array.<module:model/Share>} data
     */
    data: any;
}
/**
 * The PageString model module.
 * @module model/PageString
 * @version 3.0.3
 */
export  class PageString {
    /**
     * Constructs a <code>PageString</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PageString} obj Optional instance to populate.
     * @return {module:model/PageString} The populated <code>PageString</code> instance.
     */
    static constructFromObject(data: Object, obj: any): any;
    /**
     * @member {String} paginationToken
     */
    paginationToken: any;
    /**
     * @member {Array.<String>} data
     */
    data: any;
}
/**
 * The Parameter model module.
 * @module model/Parameter
 * @version 3.0.3
 */
export class Parameter {
    /**
     * Constructs a <code>Parameter</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Parameter} obj Optional instance to populate.
     * @return {module:model/Parameter} The populated <code>Parameter</code> instance.
     */
    static constructFromObject(data: Object, obj: any): any;
    /**
     * Constructs a new <code>Parameter</code>.
     *
     * @alias module:model/Parameter
     * @class
     * @param verb {module:model/Verb} Request method (get, put, patch or post).
     */
    constructor(verb: any);
    verb: any;
    /**
     * The parameter references a zip file. This is how this is interpreted in various scenarios: 1. verb==get implies that the byte stream should be unzipped to a folder designated by localName. 2. verb==put, patch, post the contents of the file or folder designated by localName will be zipped and sent. 3. Any other verb values result in an error. Default is false.
     * @member {Boolean} zip
     * @default false
     */
    zip: boolean;
    /**
     * The parameter will be accessed by the appbundle on demand and should not be used by the system. Default is false.
     * @member {Boolean} ondemand
     * @default false
     */
    ondemand: boolean;
    /**
     * The description of the parameter.
     * @member {String} description
     */
    description: any;
    /**
     * Specifies whether the corresponding WorkItem Argument is required. Default is false.
     * @member {Boolean} required
     * @default false
     */
    required: boolean;
    /**
     * The file or folder where the contents of an UrlArgument are placed. Note that this may be different than the `localName` for input arguments when [Content-Disposition](http://www.w3.org/Protocols/rfc2616/rfc2616-sec19.html#sec19.5.1) header is specifified by the server. For `zip` = `true` this is a folder name.
     * @member {String} localName
     */
    localName: any;
}
/**
 * The PublicKey model module.
 * @module model/PublicKey
 * @version 3.0.3
 */
export class PublicKey {
    /**
     * Constructs a <code>PublicKey</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PublicKey} obj Optional instance to populate.
     * @return {module:model/PublicKey} The populated <code>PublicKey</code> instance.
     */
    static constructFromObject(data: Object, obj: any): any;
    /**
     * Constructs a new <code>PublicKey</code>.
     * @alias module:model/PublicKey
     * @class
     * @param exponent {Blob}
     * @param modulus {Blob}
     */
    constructor(exponent: Blob, modulus: Blob);
    exponent: Blob;
    modulus: Blob;
}

/**
 * The ServiceLimit model module.
 * @module model/ServiceLimit
 * @version 3.0.3
 */
export class ServiceLimit {
    /**
     * Constructs a <code>ServiceLimit</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ServiceLimit} obj Optional instance to populate.
     * @return {module:model/ServiceLimit} The populated <code>ServiceLimit</code> instance.
     */
    static constructFromObject(data: Object, obj: any): any;
    /**
     * @member {module:model/FrontendLimits} frontendLimits
     */
    frontendLimits: any;
    /**
     * @member {Object.<String, module:model/BackendLimits>} backendLimits
     */
    backendLimits: any;
}
/**
 * The Share model module.
 * @module model/Share
 * @version 3.0.3
 */
export class Share {
    /**
     * Constructs a <code>Share</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Share} obj Optional instance to populate.
     * @return {module:model/Share} The populated <code>Share</code> instance.
     */
    static constructFromObject(data: Object, obj: any): any;
    /**
     * Constructs a new <code>Share</code>.
     * ( response only ).
     * @alias module:model/Share
     * @class
     * @param id {String} The name alias id with the owner stripped ex: CoolApp+Prod.
     * @param receiver {String} The Receiver of the shared alias.
     * @param type {module:model/ShareType} The type of the share (\"Activity\", \"App\",).
     */
    constructor(id: string, receiver: string, type: any);
    id: string;
    receiver: string;
    type: any;
}
/**
* Enum class ShareType.
* @enum {}
* @readonly
*/
export  class ShareType {
    /**
     * value: "activity"
     * @static
     */
    static get activity(): string;
    /**
     * value: "app"
     * @static
     */
    static get app(): string;
    /**
    * Returns a <code>ShareType</code> enum value from a Javascript object name.
    * @param {Object} data The plain JavaScript object containing the name of the enum value.
    * @return {module:model/ShareType} The enum <code>ShareType</code> value.
    */
    static constructFromObject(object: any): any;
}
/**
 * Enum class ShareType.
 */

/**
 * The SignedUrl model module.
 * @module model/SignedUrl
 * @version 3.0.3
 */
export  class SignedUrl {
    /**
     * Constructs a <code>SignedUrl</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SignedUrl} obj Optional instance to populate.
     * @return {module:model/SignedUrl} The populated <code>SignedUrl</code> instance.
     */
    static constructFromObject(data: Object, obj: any): any;
    /**
     * Constructs a new <code>SignedUrl</code>.
     * A digitally signed url.
     * @alias module:model/SignedUrl
     * @class
     * @param url {String} The Url value.
     * @param signature {String} The signature calculated for Url.
     */
    constructor(url: string, signature: string);
    url: string;
    signature: string;
}
/**
 * The Statistics model module.
 * @module model/Statistics
 * @version 3.0.3
 */
export  class Statistics {
    /**
     * Constructs a <code>Statistics</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Statistics} obj Optional instance to populate.
     * @return {module:model/Statistics} The populated <code>Statistics</code> instance.
     */
    static constructFromObject(data: Object, obj: any): any;
    /**
     * The time in UTC when the workitem was queued.
     * @member {Date} timeQueued
     */
    timeQueued: any;
    /**
     * The time in UTC when the system started processing the workitem by transferring input data to the processing node.
     * @member {Date} timeDownloadStarted
     */
    timeDownloadStarted: any;
    /**
     * The time in UTC when the system finished downloading input and started processing instructions from the Activity associated with this workitem.
     * @member {Date} timeInstructionsStarted
     */
    timeInstructionsStarted: any;
    /**
     * The time in UTC when the system finished executing instructions and started uploading outputs.
     * @member {Date} timeInstructionsEnded
     */
    timeInstructionsEnded: any;
    /**
     * The time in UTC when the system finished uploading outputs.
     * @member {Date} timeUploadEnded
     */
    timeUploadEnded: any;
    /**
     * The time in UTC when the system finished the workitem and reported the status.
     * @member {Date} timeFinished
     */
    timeFinished: any;
    /**
     * The file size of bytes the job downloads for input.
     * @member {Number} bytesDownloaded
     */
    bytesDownloaded: any;
    /**
     * The file size of bytes the job uploads for output.
     * @member {Number} bytesUploaded
     */
    bytesUploaded: any;
}
/**
* Enum class Status.
* @enum {}
* @readonly
*/
export  class Status {
    /**
     * value: "pending"
     * @static
     */
    static get pending(): string;
    /**
     * value: "inprogress"
     * @static
     */
    static get inprogress(): string;
    /**
     * value: "cancelled"
     * @static
     */
    static get cancelled(): string;
    /**
     * value: "failedLimitDataSize"
     * @static
     */
    static get failedLimitDataSize(): string;
    /**
     * value: "failedLimitProcessingTime"
     * @static
     */
    static get failedLimitProcessingTime(): string;
    /**
     * value: "failedDownload"
     * @static
     */
    static get failedDownload(): string;
    /**
     * value: "failedInstructions"
     * @static
     */
    static get failedInstructions(): string;
    /**
     * value: "failedUpload"
     * @static
     */
    static get failedUpload(): string;
    /**
     * value: "success"
     * @static
     */
    static get success(): string;
    /**
    * Returns a <code>Status</code> enum value from a Javascript object name.
    * @param {Object} data The plain JavaScript object containing the name of the enum value.
    * @return {module:model/Status} The enum <code>Status</code> value.
    */
    static constructFromObject(object: any): any;
}
/**
 * Enum class Status.
 */

/**
 * The StringArgument model module.
 * @module model/StringArgument
 * @version 3.0.3
 */
export class StringArgument {
    /**
     * Constructs a <code>StringArgument</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/StringArgument} obj Optional instance to populate.
     * @return {module:model/StringArgument} The populated <code>StringArgument</code> instance.
     */
    static constructFromObject(data: Object, obj: any): any;
    /**
     * @member {String} value
     */
    value: any;
}
/**
 * The StringSetting model module.
 * @module model/StringSetting
 * @version 3.0.3
 */
export class StringSetting {
    /**
     * Constructs a <code>StringSetting</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/StringSetting} obj Optional instance to populate.
     * @return {module:model/StringSetting} The populated <code>StringSetting</code> instance.
     */
    static constructFromObject(data: Object, obj: any): any;
    /**
     * @member {String} value
     */
    value: any;
    /**
     * @member {Boolean} isEnvironmentVariable
     * @default false
     */
    isEnvironmentVariable: boolean;
}
/**
 * The UploadAppBundleParameters model module.
 * @module model/UploadAppBundleParameters
 * @version 3.0.3
 */
export class UploadAppBundleParameters {
    /**
     * Constructs a <code>UploadAppBundleParameters</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UploadAppBundleParameters} obj Optional instance to populate.
     * @return {module:model/UploadAppBundleParameters} The populated <code>UploadAppBundleParameters</code> instance.
     */
    static constructFromObject(data: Object, obj: any): any;
    /**
     * Constructs a new <code>UploadAppBundleParameters</code>.
     *
     * @alias module:model/UploadAppBundleParameters
     * @class
     * @param endpointURL {String} The URL to upload the AppBundle package to.
     * @param formData {Object.<String, String>} FormData parameters to be used in the body of the AppBundle package upload request. Must be followed by a 'file' parameter indicating the package file location.
     */
    constructor(endpointURL: string, formData: any);
    endpointURL: string;
    formData: any;
}
/**
 * The UrlSetting model module.
 * @module model/UrlSetting
 * @version 3.0.3
 */
export  class UrlSetting {
    /**
     * Constructs a <code>UrlSetting</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UrlSetting} obj Optional instance to populate.
     * @return {module:model/UrlSetting} The populated <code>UrlSetting</code> instance.
     */
    static constructFromObject(data: Object, obj: any): any;
    /**
     * Constructs a new <code>UrlSetting</code>.
     * @alias module:model/UrlSetting
     * @class
     * @implements module:model/ISetting
     * @param url {String} Url.
     */
    constructor(url: string);
    url: string;
    /**
     * Headers.
     * @member {Object.<String, String>} headers
     */
    headers: any;
    /**
     * The HTTP verb to be used.
     * @member {module:model/Verb} verb
     */
    verb: any;
}
/**
* Enum class Verb.
* @enum {}
* @readonly
*/
export class Verb {
    /**
     * value: "get"
     * @static
     */
    static get get(): string;
    /**
     * value: "head"
     * @static
     */
    static get head(): string;
    /**
     * value: "put"
     * @static
     */
    static get put(): string;
    /**
     * value: "post"
     * @static
     */
    static get post(): string;
    /**
     * value: "patch"
     * @static
     */
    static get patch(): string;
    /**
     * value: "read"
     * @static
     */
    static get read(): string;
    /**
    * Returns a <code>Verb</code> enum value from a Javascript object name.
    * @param {Object} data The plain JavaScript object containing the name of the enum value.
    * @return {module:model/Verb} The enum <code>Verb</code> value.
    */
    static constructFromObject(object: any): any;
}
/**
 * Enum class Verb.
 */

/**
 * The WorkItem model module.
 * @module model/WorkItem
 * @version 3.0.3
 */
export  class WorkItem {
    /**
     * Constructs a <code>WorkItem</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WorkItem} obj Optional instance to populate.
     * @return {module:model/WorkItem} The populated <code>WorkItem</code> instance.
     */
    static constructFromObject(data: Object, obj: any, ...args: any[]): any;
    /**
     * Constructs a new <code>WorkItem</code>.
     * A WorkItem is a specification of the processing job for an Activity, and it is submitted to and executed by an Engine. Note that a WorkItem cannot be modified after it has been created. ( request only ).
     * @alias module:model/WorkItem
     * @class
     * @param activityId {String} Reference to the Activity that this WorkItem will invoke.  Examples: `MyPlot+Prod` (an Activity created by the caller) or  `Autodesk.PlotToPdf` (an Activity created by someone else and shared with this caller).
     */
    constructor(activityId: string);
    activityId: string;
    /**
     * Id.
     * @member {String} id
     */
    id: any;
    /**
     * Arguments of the WorkItem.
     * @member {Object.<String, module:model/IArgument>} arguments
     */
    arguments: any;
    /**
     * Signatures for various WorkItem attributes.
     * @member {module:model/WorkItemSignatures} signatures
     */
    signatures: any;
    /**
     * Max duration of processing in seconds per workitem (includes download and upload time).
     * @member {Number} limitProcessingTimeSec
     */
    limitProcessingTimeSec: any;
}

export class WorkItemSignatures {
    /**
     * Constructs a <code>WorkItemSignatures</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WorkItemSignatures} obj Optional instance to populate.
     * @return {module:model/WorkItemSignatures} The populated <code>WorkItemSignatures</code> instance.
     */
    static constructFromObject(data: Object, obj: any): any;
    /**
     * Digital signature of the ActivityId. The client must supply this when using a 2-legged oauth token for submitting a WorkItem.
     * @member {String} activityId
     */
    activityId: any;
    /**
     * Digitally signed base urls that are allowed in the WorkItem. The client may supply these when using a 2-legged oauth token for submitting a WorkItem.
     * @member {Array.<module:model/SignedUrl>} baseUrls
     */
    baseUrls: any;
}

export class WorkItemStatus {
    /**
     * Constructs a <code>WorkItemStatus</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WorkItemStatus} obj Optional instance to populate.
     * @return {module:model/WorkItemStatus} The populated <code>WorkItemStatus</code> instance.
     */
    static constructFromObject(data: Object, obj: any): any;
    /**
     * Constructs a new <code>WorkItemStatus</code>.
     *
     * @alias module:model/WorkItemStatus
     * @class
     * @param status {module:model/Status} The current status of the workitem.
     */
    constructor(status: any);
    status: any;
    /**
     * The current status of the workitem.
     * @member {String} progress
     */
    progress: any;
    /**
     * The detailed report about the workitem, report url is valid for 24 hours from first receiving it.
     * @member {String} reportUrl
     */
    reportUrl: any;
    /**
     * Basic statistics about workitem processing.
     * @member {module:model/Statistics} stats
     */
    stats: any;
    /**
     * @member {String} id
     */
    id: any;
}
/**
 * The XrefTreeArgument model module.
 * @module model/XrefTreeArgument
 * @version 3.0.3
 */
export  class XrefTreeArgument {
    /**
     * Constructs a <code>XrefTreeArgument</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/XrefTreeArgument} obj Optional instance to populate.
     * @return {module:model/XrefTreeArgument} The populated <code>XrefTreeArgument</code> instance.
     */
    static constructFromObject(data: Object, obj: any): any;
    /**
     * Constructs a new <code>XrefTreeArgument</code>.
     * @alias module:model/XrefTreeArgument
     * @class
     * @implements module:model/IArgument
     * @param url {String} Url.
     */
    constructor(url: string);
    url: string;
    /**
     * Argument optionality. Failure to download optional input arguments is OK. Failure to find or upload optional output arguments is OK. Defaults to false.
     * @member {Boolean} optional
     * @default false
     */
    optional: boolean;
    /**
     * The file or folder where the contents of an UrlArgument are placed. Note that this may be different than the `localName` for input arguments when [Content-Disposition] (http://www.w3.org/Protocols/rfc2616/rfc2616-sec19.html#sec19.5.1) header is specifified by the server. For `zip` = `true` this is a folder name. See Activity.instructions for more information.
     * @member {String} localName
     */
    localName: any;
    /**
     * Denotes the 'main file` in a zip. See Activity.instructions for more information. If the url does not point to a zip the this parameter is ignored. The parameter references a zip file. This is how this is interpreted in various scenarios: 1. verb==get implies that the byte stream should be unzipped to a folder designated by localName. 2. verb==put, patch, post the contents of the file or folder designated by localName will be zipped and sent. 3. Any other verb values result in an error.
     * @member {String} pathInZip
     */
    pathInZip: any;
    /**
     * @member {Array.<module:model/XrefTreeArgument>} references
     */
    references: any;
    /**
     * Headers.
     * @member {Object.<String, String>} headers
     */
    headers: any;
    /**
     * The HTTP verb to be used.
     * @member {module:model/Verb} verb
     */
    verb: any;
}
